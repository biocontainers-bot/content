
{
    "credit": [
        {
            "email": "gmarcais@umd.edu",
            "name": "Guillaume Marçais",
            "typeEntity": "Person",
            "typeRoles": [
                "Primary contact"
            ]
        },
        {
            "email": "carlk@cs.cmu.edu",
            "name": "Carl Kingsford",
            "typeEntity": "Person",
            "typeRoles": [
                "Primary contact"
            ]
        }
    ],
    "documentation": [
        {
            "type": "User manual",
            "url": "http://www.genome.umd.edu/docs/JellyfishUserGuide.pdf"
        },
        {
            "type": "General",
            "url": "https://github.com/gmarcais/Jellyfish/tree/develop/swig"
        }
    ],
    "function": [
        {
            "operation": [
                {
                    "term": "k-mer counting",
                    "uri": "http://edamontology.org/operation_3472"
                }
            ]
        }
    ],
    "labels": {
        "collectionID": [
            "Animal and Crop Genomics"
        ],
        "language": [
            "Ruby",
            "C++",
            "Perl",
            "Python"
        ],
        "license": "GPL-3.0",
        "operatingSystem": [
            "Linux",
            "Mac"
        ],
        "toolType": [
            "Command-line tool"
        ],
        "topic": [
            {
                "term": "Sequence analysis",
                "uri": "http://edamontology.org/topic_0080"
            },
            {
                "term": "Genomics",
                "uri": "http://edamontology.org/topic_0622"
            }
        ]
    },
    "publication": [
        {
            "abstract": "Motivation: Counting the number of occurrences of every k-mer (substring of length k) in a long string is a central subproblem in many applications, including genome assembly, error correction of sequencing reads, fast multiple sequence alignment and repeat detection. Recently, the deep sequence coverage generated by next-generation sequencing technologies has caused the amount of sequence to be processed during a genome project to grow rapidly, and has rendered current k-mer counting tools too slow and memory intensive. At the same time, large multicore computers have become commonplace in research facilities allowing for a new parallel computational paradigm. Results: We propose a new k-mer counting algorithm and associated implementation, called Jellyfish, which is fast and memory efficient. It is based on a multithreaded, lock-free hash table optimized for counting k-mers up to 31 bases in length. Due to their flexibility, suffix arrays have been the data structure of choice for solving many string problems. For the task of k-mer counting, important in many biological applications, Jellyfish offers a much faster and more memory-efficient solution. © The Author 2011. Published by Oxford University Press. All rights reserved.",
            "authors": [
                "Marcais G.",
                "Kingsford C."
            ],
            "cit_count": 584,
            "journal": "Bioinformatics",
            "pmid": "21217122",
            "title": "A fast, lock-free approach for efficient parallel counting of occurrences of k-mers",
            "year": "2011-03-01"
        }
    ],
    "summary": {
        "biotoolsCURIE": "biotools:jellyfish",
        "biotoolsID": "jellyfish",
        "description": "A command-line algorithm for counting k-mers in DNA sequence.",
        "homepage": "http://www.genome.umd.edu/jellyfish.html",
        "name": "Jellyfish",
        "version": [
            "2.0"
        ]
    }
}
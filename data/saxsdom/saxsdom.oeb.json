
{
    "credit": [
    ],
    "function": [
        {
            "operation": [
                {
                    "term": "Protein modelling",
                    "uri": "http://edamontology.org/operation_0477"
                },
                {
                    "term": "Ab initio structure prediction",
                    "uri": "http://edamontology.org/operation_0476"
                },
                {
                    "term": "Sequence assembly",
                    "uri": "http://edamontology.org/operation_0310"
                },
                {
                    "term": "Protein structure validation",
                    "uri": "http://edamontology.org/operation_0321"
                },
                {
                    "term": "Fold recognition",
                    "uri": "http://edamontology.org/operation_0303"
                }
            ]
        }
    ],
    "labels": {
        "language": [
            "C++"
        ],
        "topic": [
            {
                "term": "Protein folds and structural domains",
                "uri": "http://edamontology.org/topic_0736"
            },
            {
                "term": "Sequence assembly",
                "uri": "http://edamontology.org/topic_0196"
            },
            {
                "term": "Structure prediction",
                "uri": "http://edamontology.org/topic_0082"
            },
            {
                "term": "Machine learning",
                "uri": "http://edamontology.org/topic_3474"
            },
            {
                "term": "Small molecules",
                "uri": "http://edamontology.org/topic_0154"
            }
        ]
    },
    "publication": [
        {
            "abstract": "Â© 2019 Wiley Periodicals, Inc.Many proteins are composed of several domains that pack together into a complex tertiary structure. Multidomain proteins can be challenging for protein structure modeling, particularly those for which templates can be found for individual domains but not for the entire sequence. In such cases, homology modeling can generate high quality models of the domains but not for the orientations between domains. Small-angle X-ray scattering (SAXS) reports the structural properties of entire proteins and has the potential for guiding homology modeling of multidomain proteins. In this article, we describe a novel multidomain protein assembly modeling method, SAXSDom that integrates experimental knowledge from SAXS with probabilistic Input-Output Hidden Markov model to assemble the structures of individual domains together. Four SAXS-based scoring functions were developed and tested, and the method was evaluated on multidomain proteins from two public datasets. Incorporation of SAXS information improved the accuracy of domain assembly for 40 out of 46 critical assessment of protein structure prediction multidomain protein targets and 45 out of 73 multidomain protein targets from the ab initio domain assembly dataset. The results demonstrate that SAXS data can provide useful information to improve the accuracy of domain-domain assembly. The source code and tool packages are available at https://github.com/jianlin-cheng/SAXSDom.",
            "authors": [
                "Hou J.",
                "Adhikari B.",
                "Tanner J.J.",
                "Cheng J."
            ],
            "cit_count": 0,
            "doi": "10.1002/PROT.25865",
            "journal": "Proteins: Structure, Function and Bioinformatics",
            "pmid": "31860156",
            "title": "SAXSDom: Modeling multidomain protein structures using small-angle X-ray scattering data",
            "year": "2019-01-01"
        }
    ],
    "summary": {
        "biotoolsCURIE": "biotools:SAXSDom",
        "biotoolsID": "SAXSDom",
        "description": "Modeling multidomain protein structures using small-angle X-ray scattering data.\n\nThis is a bioinformatics tool to use SAXS data to assemble protein domain structures into full-length structural models.\n\nInstallation (tested on CentOS Linux 7 (Core)).\n\n(3) Compile SAXSDom from source code (required).\n\nrunning /data/jh7x3/SAXSDom/db_tools/tools/cmake-2.8.12.2/bin/cmake -E create_symlink \"/data/jh7x3/SAXSDom/installation/Mocapy++-1.07/examples/data\" \"/data/jh7x3/SAXSDom/installation/Mocapy++-1.07/examples/data\" 2>&1",
        "homepage": "https://github.com/jianlin-cheng/SAXSDom",
        "name": "SAXSDom"
    }
}